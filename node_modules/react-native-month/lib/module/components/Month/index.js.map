{"version":3,"sources":["index.tsx"],"names":["React","memo","props","month","year","onPress","locale","dayNames","showWeekdays","disabledDays","disableRange","disableOffsetDays","firstDayMonday","startDate","endDate","minDate","maxDate","theme","renderDayContent","DAY_NAMES","Array","isArray","length","days","weeks","push","splice","map","week","index","String","flexDirection","day","id","areEqual"],"mappings":"mKAAA,oDACA,yCAEA,sCACA,+BACA,6DACA,mD,yHAEeA,eAAMC,IAAN,CAAuB,SAACC,KAAD,CAAuB,IAEzDC,CAAAA,KAFyD,CAkBvDD,KAlBuD,CAEzDC,KAFyD,CAGzDC,IAHyD,CAkBvDF,KAlBuD,CAGzDE,IAHyD,CAIzDC,OAJyD,CAkBvDH,KAlBuD,CAIzDG,OAJyD,eAkBvDH,KAlBuD,CAKzDI,MALyD,CAKzDA,MALyD,wBAKhD,IALgD,eAMzDC,QANyD,CAkBvDL,KAlBuD,CAMzDK,QANyD,CAOzDC,YAPyD,CAkBvDN,KAlBuD,CAOzDM,YAPyD,qBAkBvDN,KAlBuD,CAQzDO,YARyD,CAQzDA,YARyD,8BAQ1C,EAR0C,yCAkBvDP,KAlBuD,CASzDQ,YATyD,CASzDA,YATyD,8BAS1C,KAT0C,2CAkBvDR,KAlBuD,CAUzDS,iBAVyD,CAUzDA,iBAVyD,gCAUrC,KAVqC,6CAkBvDT,KAlBuD,CAWzDU,cAXyD,CAWzDA,cAXyD,gCAWxC,IAXwC,uBAYzDC,SAZyD,CAkBvDX,KAlBuD,CAYzDW,SAZyD,CAazDC,OAbyD,CAkBvDZ,KAlBuD,CAazDY,OAbyD,CAczDC,OAdyD,CAkBvDb,KAlBuD,CAczDa,OAdyD,CAezDC,OAfyD,CAkBvDd,KAlBuD,CAezDc,OAfyD,cAkBvDd,KAlBuD,CAgBzDe,KAhByD,CAgBzDA,KAhByD,uBAgBjD,EAhBiD,cAiBzDC,gBAjByD,CAkBvDhB,KAlBuD,CAiBzDgB,gBAjByD,CAoB3D,GAAMC,CAAAA,SAAS,CACbC,KAAK,CAACC,OAAN,CAAcd,QAAd,GAA2BA,QAAQ,CAACe,MAAT,GAAoB,CAA/C,CACIf,QADJ,CAEI,sBAAYD,MAAZ,CAAoBM,cAApB,CAHN,CAKA,GAAMW,CAAAA,IAAI,CAAG,wBACXpB,KADW,CAEXC,IAFW,CAGXQ,cAHW,CAIXF,YAJW,CAKXD,YALW,CAMXE,iBANW,CAOXE,SAPW,CAQXC,OARW,CASXC,OATW,CAUXC,OAVW,CAAb,CAaA,GAAMQ,CAAAA,KAAK,CAAG,EAAd,CAEA,MAAOD,IAAI,CAACD,MAAZ,CAAoB,CAClBE,KAAK,CAACC,IAAN,CAAWF,IAAI,CAACG,MAAL,CAAY,CAAZ,CAAe,CAAf,CAAX,EACD,CAED,MACE,2DACGlB,YAAY,EAAI,6BAAC,iBAAD,EAAU,IAAI,CAAEW,SAAhB,CAA2B,KAAK,CAAEF,KAAlC,iDADnB,CAEGO,KAAK,CAACG,GAAN,CAAU,SAACC,IAAD,CAAkBC,KAAlB,QACT,8BAAC,iBAAD,EAAM,GAAG,CAAEC,MAAM,CAACD,KAAD,CAAjB,CAA0B,KAAK,CAAE,CAAEE,aAAa,CAAE,KAAjB,CAAjC,iDACGH,IAAI,CAACD,GAAL,CAAS,SAACK,GAAD,QACR,8BAAC,YAAD,EACE,GAAG,CAAEA,GAAG,CAACC,EADX,CAEE,IAAI,CAAED,GAFR,CAGE,OAAO,CAAE3B,OAHX,CAIE,KAAK,CAAEY,KAJT,CAKE,gBAAgB,CAAEC,gBALpB,iDADQ,EAAT,CADH,CADS,EAAV,CAFH,CADF,CAkBD,CA9Dc,CA8DZgB,eA9DY,C","sourcesContent":["import React from 'react';\nimport { View } from 'react-native';\nimport { DayType, MonthProps } from '../../types';\nimport { getDayNames } from '../../utils/date';\nimport { getMonthDays, areEqual } from '../utils';\nimport WeekDays from '../WeekDays';\nimport Day from '../Day';\n\nexport default React.memo<MonthProps>((props: MonthProps) => {\n  const {\n    month,\n    year,\n    onPress,\n    locale = 'en',\n    dayNames,\n    showWeekdays,\n    disabledDays = {},\n    disableRange = false,\n    disableOffsetDays = false,\n    firstDayMonday = true,\n    startDate,\n    endDate,\n    minDate,\n    maxDate,\n    theme = {},\n    renderDayContent,\n  } = props;\n\n  const DAY_NAMES =\n    Array.isArray(dayNames) && dayNames.length === 7\n      ? dayNames\n      : getDayNames(locale, firstDayMonday);\n\n  const days = getMonthDays(\n    month,\n    year,\n    firstDayMonday,\n    disableRange,\n    disabledDays,\n    disableOffsetDays,\n    startDate,\n    endDate,\n    minDate,\n    maxDate\n  );\n\n  const weeks = [];\n\n  while (days.length) {\n    weeks.push(days.splice(0, 7));\n  }\n\n  return (\n    <>\n      {showWeekdays && <WeekDays days={DAY_NAMES} theme={theme} />}\n      {weeks.map((week: DayType[], index: number) => (\n        <View key={String(index)} style={{ flexDirection: 'row' }}>\n          {week.map((day: DayType) => (\n            <Day\n              key={day.id}\n              item={day}\n              onPress={onPress}\n              theme={theme}\n              renderDayContent={renderDayContent}\n            />\n          ))}\n        </View>\n      ))}\n    </>\n  );\n}, areEqual);\n"]}