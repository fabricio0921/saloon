import * as React from 'react';
import { CalendarProps, ViewableItemsType } from '../types';
interface State {
    firstMonthToRender: Date;
    months: any[];
    firstViewableIndex: number;
    lastViewableIndex: number;
    initialScrollIndex: number;
    startDate?: Date;
    endDate?: Date;
}
export default class Calendar extends React.Component<CalendarProps, State> {
    static defaultProps: {
        numberOfMonths: number;
        startingMonth: string;
        initialListSize: number;
        showWeekdays: boolean;
        showMonthTitle: boolean;
        theme: {};
        locale: string;
        monthNames: never[];
        dayNames: never[];
        disableRange: boolean;
        firstDayMonday: boolean;
        monthHeight: number;
        disableOffsetDays: boolean;
        viewableRangeOffset: number;
    };
    constructor(props: CalendarProps);
    UNSAFE_componentWillMount(): void;
    UNSAFE_componentWillReceiveProps(nextProps: CalendarProps): void;
    shouldComponentUpdate(nextProps: CalendarProps, nextState: State): boolean;
    private listReference?;
    getItemLayout: (_data: any, index: number) => {
        length: number;
        offset: number;
        index: number;
    };
    keyExtractor: (_item: any, index: number) => string;
    handleViewableItemsChange: (info: ViewableItemsType) => void;
    handlePressDay: (date: Date) => void;
    setReference: (ref: any) => void;
    getMonthIndex: (date: Date, months: any[], firstMonthToRender: Date) => number | null;
    renderMonth: ({ index }: {
        index: number;
    }) => JSX.Element;
    render(): JSX.Element;
}
export {};
